#!/bin/bash

# PandaServer utility script. Manage files using this script.
# To get started, run this script in the terminl: panda-manager --help

# Help page
usage() {
    cat <<USAGE
Usage: panda-manager [OPTION] [...args]

Note: PandaServer command-line utility tool.

Options:
    -h, --help                  Help page for the utility tool
    -s, --start [browser]       Start the server. If browser is passed,
                                then open in a new browser tab in the given
                                browser
        -p [PORT]               Port number
    -d, --download              Download server.py

To learn more about the specific commands, use the "help" keyword after the option.

Example:
panda-manager --start help

Error Codes:
A detailed overview of error codes can be found in docs/errors.md, or by
going to https://github.com/asiangoldfish/PandaServer/blob/main/docs/errors.md

USAGE
    return
}

source_venv() {
    # Activate virtual environment
    valid_dirnames=( "venv" ".venv" "env" ".env" )
    for name in "${valid_dirnames[@]}"; do
        if [[ -d ${name} ]]; then
            source "${name}/bin/activate"
            return 0
        fi
    done

    # If no virtual environments were found, return 1
    return 1
}

# Checks if a command is available
verify_cmd() {
    if ! command -v "${1}" &> /dev/null; then
        echo "Error 2: Command ${1} not found."
        return 1
    else
        return 0
    fi
}

# Starts the PandaServer
start() {
    if [[ $2 == "--help" ]] || [[ $2 == "-h" ]]; then
        echo """Usage: panda-manager --start [OPTION]

Starts the PandaServer. The server is run with the script server.py. This command also
takes optional arguments.

Arguments:
    -b, --browser [VALUE]   Right after --start, enter a browser name and open a new tab in it.
        -p, --port [VALUE]  Open another the server in another port. This option will override
                            any port settings in the settings.ini config file.
    -lr, --live-reload      Enable live reload. Disabled by default.

For more about the command in detail, visit the documentation at
https://github.com/asiangoldfish/PandaServer.

Due to the way that the commands are parsed, incorrect arguments will be ignored and default
values will be applied.

Errors:
Some errors may occur. Visit the documentation for help with troubleshooting them."""

        return 0
    fi

    # Enables virtual environment
    source_venv
    source_val=$?
    if [ ${source_val} -eq 1 ]; then
        echo "No virtual environment was found. Use the following command to setup one up:"
        echo "panda-manager -d modules"
        return 1
    fi

    # Check if Python3 is installed on the system
    verify_cmd "python3"
    verify_val=$?
    if [ ${verify_val} -eq 1 ]; then
        return
    fi

    # Checks that the main file exists
    if ! [ -f server.py ]; then
        echo -n "File server.py does not exist. "
        echo "Download the file using the following command:"
        echo "bash panda-manager -d server.py"
        return 1
    fi

    # Checks for a second argument, which will tell the script to
    # open a new tab in a chosen browser and what command to open
    # the browser with

    # Runs through each argument passed and checks for flags and value accordingly
    browser=""
    port=""
    live_reload="false"
    host="localhost"
    while ! [[ $2 == "" ]]; do
        case $2 in
            -b | --browser)
                if ! [[ $3 == "" ]]; then
                    browser="${3}"
                fi
                ;;
            -p | --port)
                if ! [[ $3 == "" ]]; then
                    port="${3}"
                fi
                ;;
            -h | --host)
                if ! [[ $3 == "" ]]; then
                    host="${3}"
                fi
                ;;
            -lr | --live-reload)
                live_reload="true"
                ;;
            # *)
            #     echo ""
            #     ;;
        esac
        shift
    done

    # Verifies port number
    if [[ "${port}" =~ ^[0-9]+$ ]] && ((${port} >= 1024 && ${port} <= 65536)); then
        port="${port}"
    elif [[ "${port}" == "" ]]; then
        :
    else
        echo "Port number must be an integer between 1024 and 65536"
        return 1
    fi     

    # Opens browser if appropriate argument is passed
    if ! [[ ${browser} == "" ]]; then
        # Checks if command is available
        verify_cmd "${browser}"
        verify_val=$?
        if [ ${verify_val} -eq 1 ]; then
            return 1
        fi
        # Run the browser
        ${browser} http://${host}:${port} > /dev/null 2>&1
    fi
    
    # Enables live-reload if enabled
    if [[ ${live_reload} == "true" ]]; then
        verify_cmd "nodemon"
        verify_val=$?
        if [ ${verify_val} -eq 1 ]; then
            return 1
        fi

        nodemon server.py ${port}
    else
        python3 server.py ${port}
    fi
}

download_server() {
    # Enables user to quickly download file server.py in case the file is missing

    # Checks if file already exists, prompts user to continue if file was found
    if [ -f ./server.py ]; then
        read -r -p "Found server.py already exists. Continue? [y/N] " input
 
        case $input in
            [yY][eE][sS]|[yY])
                echo ""
                ;;
            *)
                return
                ;;
        esac
    fi

    # Check if curl is installed on the system
    verify_cmd "curl"
    verify_val=$?
    if [ ${verify_val} -eq 1 ]; then
        return 1;
    fi

    # Pings to check if the script is still available
    serverpy_url="https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/server.py"
    if curl -s --head --request GET $serverpy_url | grep "HTTP/2 200" > /dev/null; then
        echo "Downloading file server.py from $serverpy_url"

        curl -o ./server.py $serverpy_url
        return 0
    else
        echo "Error 3: Could not find server.py in the remote repository"
        return 1
    fi    
}

download_pandahttp() {
    # Check if curl is installed on the system
    verify_cmd "curl"
    verify_val=$?
    if [ ${verify_val} -eq 1 ]; then
        return 1;
    fi

    # Checks that the current directory is PandaServer to ensure that
    # files are downloaded in the correct location
    cwd=$(pwd) # Current directory
    dirname="$(echo $cwd | rev | cut -d'/' -f 1 | rev)"
    if ! [[ ${dirname} == "PandaServer" ]]; then
        echo "Currently not in directory PandaServer. Please change to the project directory before proceeding."
        return 1
    fi

    # Pings all sites to scripts and directories and ensure their availability
    urls=(
        "https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/pandahttp/__init__.py"
        "https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/pandahttp/httpserver.py"
        "https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/pandahttp/mysql.py"
        "https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/pandahttp/terminal.py"
    )
    # Pings each url to see if they are online
    for url in "${urls[@]}"; do
        filename="$(echo $url | rev | cut -d'/' -f 1 | rev)"
        if curl -s --head --request GET $url | grep "HTTP/2 200" > /dev/null; then
        # Splits the url to get the file name

        echo "Fetching ${filename}..."
        else
            echo "Error 3: Could not find $filename in the remote repository"
            return 1
        fi 
    done

    # Creates a new pandahttp directory and also changes directory
    mkdir pandahttp
    cd pandahttp

    # Downloads all files in pandahttp module from remote repository
    echo ""
    for url in "${urls[@]}"; do
        filename="$(echo $url | rev | cut -d'/' -f 1 | rev)"
        echo "Downloading ${filename}..."
        curl -o ${filename} ${url}
    done
    
    cd ${cwd} # Change back to original directory
}

download_modules() {
    return 0
}

# Handles downloading dependencies
download() {
    case $2 in
    -h | --help)
        echo """Usage: panda-manager --download [FILES]
Example: panda-manager -d server.py
Download missing dependencies automatically from the internet. This command 
also checks if the source is available and will return an error if it's not.

Arguments:
    server.py                   Downloads the main script of the server. With-
                                out this script, the engine will not work.
    pandahttp                   Downloads the custom module pandahttp that
                                the project relies on.
    modules                     Installs all dependencies required for the project

An issue can be raised at https://github.com/asiangoldfish/PandaServer/issues if any sources are unavailable."""

        return 0
        ;;
    server.py)
        download_server
        return 0
        ;;
    pandahttp)
        download_pandahttp
        return 0
        ;;
    modules)
        # Activates virtual environment first to install all dependencies
        # locally in the project directory
        # Firstly, checks if the python3 binary exists in the project folder
        if ! ([ -f "venv/bin/python3" ] || [ -f ".venv/bin/python3" ] || [ -f "env/bin/python3" ] || [ -f ".env/bin/python3" ]); then
            echo -n "Could not find Python executable in a virtual environment. Install virtual environment? [Y/n] "
            read -r venv_prompt
            echo ${venv_prompt}
            if ! ([[ ${venv_prompt} == "" ]] || [[ ${venv_prompt} == "y" ]] || [[ ${venv_prompt} == "Y" ]]); then
                echo "No dependencies were installed"
                return 0
            else
                # Check if python3-venv is installed on the system
                if ! command -v python3 -m venv venv &> /dev/null; then
                    echo "Error 2: Python module 'venv' not found."
                    return 1
                fi
                
                # Creates virtual environment
                echo "Creating virtual environment..."
                python3 -m venv venv
            fi
        fi

        source_venv

        # Download dependencies if requirements.txt file exists
        if ! [[ -f "requirements.txt" ]]; then
            echo "File requirements.txt was not found."
        fi

        verify_cmd "pip3"
        verify_return=$?
        if [ ${verify_return} -eq 1 ]; then
            return 1
        else
            pip3 install -r requirements.txt
            echo -e "\nSuccessfully installed all dependencies"
        fi
        ;;
    esac
}
###
# Functions
###

# Main script. Using a function here, enables usage or return statement
main(){
    # Runs help message if no arguments were found
    if [ $# -eq 0 ]; then
        echo "This script requires arguments. Example: panda-manager --help."
        return 0
    # elif [[ $# -gt 2 ]]; then
    #     echo "Too many arguments. This script only takes one argument."
    #     return 0
    fi

    # Checks for flags and runs accordingly
    for arg in "$@"; do
        case $arg in
        -h | --help)
            usage
            return
            ;;
        -s | --start)
            start "$@"
            return
            ;;
        -d | --download)
            download "$@"
            return
            ;;
        *)
            echo "Invalid command: $arg"
            return
            ;;
        esac
    done
}

# Run script
main "$@"