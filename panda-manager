#!/bin/bash

# PandaServer utility script. Manage files using this script.
# To get started, run this script in the terminl: panda-manager --help

# Project version
version="1.0.0"

# Global variables
SCRIPT_PATH="$(dirname "$0")" # The path to this script
INIPARSER="$SCRIPT_PATH/src/utils/ini_parser.py"


source "scripts/info.sh"
source "scripts/start.sh"

####
# Activate python virtual environment
function activate_venv() {
    valid_venv="venv" # Valid virtual environment name

    if [ -f "$valid_venv/bin/activate" ]; then
        source "$valid_venv/bin/activate"
        return 0
    else
        # If no virtual environments were found, return 1
        echo "panda-manager: Could not activate Python3 virtual environment"
        return 1
    fi
}

####
# Initialize the system
#
# Ensures that all commands are available
####
function initialize() {
    verify_cmd "python3" || return 1
    verify_cmd "pip3" || return 1

    return 0
}

####
# Help page
####
function usage() (
    echo "Usage: panda-manager [OPTION] [...args]
    
Utility tool for managing the Panda Server. Some commands require the script
to be run from within the project directory. These particular commands will run
checks if required.

Options:
    help, --help            help page for the Panda Server project
    version, --version      project version
    start [args]            launch the Panda Server
    info [args]             additional info about the project

Commands may have sub-commands. To learn more about these, append the --help flag.
Example: panda-manager --start --help

Error Codes:
A detailed overview over all error codes can be found in docs/errors.md, or at
https://github.com/asiangoldfish/PandaServer/blob/main/docs/errors.md

This project is open-source under the GPLv3 license and can be found at
https://github.com/asiangoldfish/PandaServer"

    return 0
)

# Checks if a command is available
verify_cmd() {
    command -v "$1" &>/dev/null && return 0
    echo "Error 2: Command ${1} not found." && return 1
}

####
# Main script. Using a function here, enables usage or return statement
####
function main() {

    # Runs help message if no arguments were found
    if [ $# -eq 0 ]; then usage && return; fi

    # Checks for flags and runs accordingly
    for arg in "$@"; do
        case $arg in
        --help | help)
            usage
            return 0
            ;;
        --version | version)
            echo "${version}"
            return 0
            ;;

        start)
            # Checks if the script is run from within the project directory
            initialize || return 1
            start_main "$@"
            return 0
            ;;

        info)
            initialize || return 1
            return 0
            ;;
        *)
            printf "panda-manager: invalid argument %s\n" "$*"
            return 0
            ;;
        esac
    done

    return 1
}

# Run script
main "$@" || exit 1
