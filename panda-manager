#!/bin/bash

# PandaServer utility script. Manage files using this script.
# To get started, run this script in the terminl: panda-manager --help

# Help page
usage() {
    cat <<USAGE
Usage: panda-manager [OPTION] [...args]

Note: PandaServer command-line utility tool.

Options:
    -h, --help                  Help page for the utility tool
    -s, --start [browser]       Start the server. If browser is passed,
                                then open in a new browser tab in the given
                                browser
        -p [PORT]               Port number
    -d, --download              Download server.py

To learn more about the specific commands, use the "help" keyword after the option.

Example:
panda-manager --start help

Error Codes:
A detailed overview of error codes can be found in docs/errors.md, or by
going to https://github.com/asiangoldfish/PandaServer/blob/main/docs/errors.md

USAGE
    return
}

# Starts the PandaServer
start() {
    if [[ $2 == "help" ]]; then
        echo """Usage: panda-manager --start [OPTION]

Starts the PandaServer. The server is run with the script server.py. This command also
takes optional arguments.

Arguments:
    [BROWSER]               Right after --start, enter a browser name and open a new tab in it
    -p, --port              Open another the server in another port. This option will override
                            any port settings in the settings.ini config file"""

        return 0
    fi

    # Check if Python3 is installed on the system
    if ! command -v python3 &> /dev/null; then
        echo "Error 1: Command python3 not found."
        return 1
    fi

    # Checks that the main file exists
    if ! [ -f server.py ]; then
        echo -n "File server.py does not exist. "
        echo "Download the file using the following command:"
        echo "bash panda-manager -d server.py"
        return 1
    fi

    # Checks for a second argument, which will tell the script to
    # open a new tab in a chosen browser and what command to open
    # the browser with
    port="" # Runs server with default port

    if ! [[ $2 == "" ]]; then
        # Checks if command is available
        if ! command -v "$2" &> /dev/null; then
            echo "Error 1: Command $2 not found."
            return 1
        fi
        
        # Checks if port number was passed as argument
        if [[ $3 == "-p" ]] || [[ $3 == "--port" ]]; then
            # Checks if the given input is an integer or is empty
            if [[ "$4" =~ ^[0-9]+$ ]] && (($4 >= 1024 && $4 <= 65536)); then
                port="$4"
            else
                echo "Port number must be an integer between 1024 and 65536"
                return 1
            fi
        fi

        # Executes command if available
        brave-browser http://localhost:$port > /dev/null 2>&1
    fi
    
    python3 server.py ${port}
}

download_server() {
    # Enables user to quickly download file server.py in case the file is missing

    # Checks if file already exists, prompts user to continue if file was found
    if [ -f ./server.py ]; then
        read -r -p "Found server.py already exists. Continue? [y/N] " input
 
        case $input in
            [yY][eE][sS]|[yY])
                echo ""
                ;;
            *)
                return
                ;;
        esac
    fi

    # Check if curl is installed on the system
    if ! command -v curl &> /dev/null; then
        echo "Error 2: Command curl not found."
        return 1
    fi

    # Pings to check if the script is still available
    serverpy_url="https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/server.py"
    if curl -s --head --request GET $serverpy_url | grep "HTTP/2 200" > /dev/null; then
        echo "Downloading file server.py from $serverpy_url"

        curl -o ./server.py $serverpy_url
        return 0
    else
        echo "Error 3: Could not find server.py in the remote repository"
        return 1
    fi    
}

download_pandahttp() {
    # Check if curl is installed on the system
    if ! command -v curl &> /dev/null; then
        echo "Error 2: Command curl not found."
        return 1
    fi

    # Checks that the current directory is PandaServer to ensure that
    # files are downloaded in the correct location
    cwd=$(pwd) # Current directory
    dirname="$(echo $cwd | rev | cut -d'/' -f 1 | rev)"
    if ! [[ ${dirname} == "PandaServer" ]]; then
        echo "Currently not in directory PandaServer. Please change to the project directory before proceeding."
        return 1
    fi

    # Pings all sites to scripts and directories and ensure their availability
    urls=(
        "https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/pandahttp/__init__.py"
        "https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/pandahttp/httpserver.py"
        "https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/pandahttp/mysql.py"
        "https://raw.githubusercontent.com/asiangoldfish/PandaServer/main/pandahttp/terminal.py"
    )
    # Pings each url to see if they are online
    for url in "${urls[@]}"; do
        filename="$(echo $url | rev | cut -d'/' -f 1 | rev)"
        if curl -s --head --request GET $url | grep "HTTP/2 200" > /dev/null; then
        # Splits the url to get the file name

        echo "Fetching ${filename}..."
        else
            echo "Error 3: Could not find $filename in the remote repository"
            return 1
        fi 
    done

    # Creates a new pandahttp directory and also changes directory
    mkdir pandahttp
    cd pandahttp

    # Downloads all files in pandahttp module from remote repository
    echo ""
    for url in "${urls[@]}"; do
        filename="$(echo $url | rev | cut -d'/' -f 1 | rev)"
        echo "Downloading ${filename}..."
        curl -o ${filename} ${url}
    done
    
    cd ${cwd} # Change back to original directory
}

# Handles downloading dependencies
download() {
    if [[ $2 == "help" ]] || [[ $2 == "" ]]; then
        echo """Usage: panda-manager -d [...args]
Example: panda-manager -d server.py
Download missing dependencies automatically from the internet. This command 
also checks if the source is available and will return an error if it's not.

Arguments:
    server.py                   Downloads the main script of the server. With-
                                out this script, the engine will not work.
    pandahttp                   Downloads the custom module pandahttp that
                                the project relies on.

An issue can be raised at https://github.com/asiangoldfish/PandaServer/issues if any sources are unavailable."""

        return 0
    elif [[ $2 == "server.py" ]]; then
        download_server
        return 0
    elif [[ $2 == "pandahttp" ]]; then
        download_pandahttp
        return 0
    fi
}
###
# Functions
###

# Main script. Using a function here, enables usage or return statement
main(){
    # Runs help message if no arguments were found
    if [ $# -eq 0 ]; then
        echo "This script requires arguments. Example: panda-manager --help."
        return 0
    # elif [[ $# -gt 2 ]]; then
    #     echo "Too many arguments. This script only takes one argument."
    #     return 0
    fi

    # Checks for flags and runs accordingly
    for arg in "$@"; do
        case $arg in
        -h | --help)
            usage
            return
            ;;
        -s | --start)
            start "$@"
            return
            ;;
        -d | --download)
            download "$@"
            return
            ;;
        *)
            echo "Invalid command: $arg"
            return
            ;;
        esac
    done
}

# Run script
main "$@"